cc.Class({
    extends: cc.Component,

    properties: {
        testButton: cc.Button,
        resultLabel: cc.Label
    },

    onLoad() {
        if (this.testButton) {
            this.testButton.node.on('click', this.runDatabaseTest, this);
        }
    },

    runDatabaseTest() {
        this.updateResult("ƒêang ki·ªÉm tra k·∫øt n·ªëi database...");
        
        // Test 1: Health check
        this.testHealthCheck(() => {
            // Test 2: Create test player
            this.testCreatePlayer(() => {
                // Test 3: Get player data
                this.testGetPlayer(() => {
                    // Test 4: Save score
                    this.testSaveScore(() => {
                        // Test 5: Get leaderboard
                        this.testLeaderboard(() => {
                            this.updateResult("‚úÖ T·∫•t c·∫£ tests ƒë·ªÅu th√†nh c√¥ng! Database ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng.");
                        });
                    });
                });
            });
        });
    },

    testHealthCheck(callback) {
        this.updateResult("üîç Test 1: Ki·ªÉm tra server health...");
        
        if (!window.DatabaseManager) {
            this.updateResult("‚ùå DatabaseManager kh√¥ng t·ªìn t·∫°i!");
            return;
        }

        window.DatabaseManager.get('/health', (error, data) => {
            if (error) {
                this.updateResult(`‚ùå Health check failed: ${error.message}`);
                return;
            }
            
            this.updateResult("‚úÖ Test 1: Server health OK");
            callback();
        });
    },

    testCreatePlayer(callback) {
        this.updateResult("üîç Test 2: T·∫°o test player...");
        
        const testPlayerId = 'test_' + Date.now();
        const playerData = {
            name: 'Test Player',
            highScore: 100,
            level: 1,
            coins: 50
        };

        window.DatabaseManager.updatePlayerData(testPlayerId, playerData, (error, data) => {
            if (error) {
                this.updateResult(`‚ùå Create player failed: ${error.message}`);
                return;
            }
            
            this.testPlayerId = testPlayerId;
            this.updateResult("‚úÖ Test 2: T·∫°o player th√†nh c√¥ng");
            callback();
        });
    },

    testGetPlayer(callback) {
        this.updateResult("üîç Test 3: L·∫•y th√¥ng tin player...");
        
        window.DatabaseManager.getPlayerData(this.testPlayerId, (error, data) => {
            if (error) {
                this.updateResult(`‚ùå Get player failed: ${error.message}`);
                return;
            }
            
            this.updateResult("‚úÖ Test 3: L·∫•y th√¥ng tin player th√†nh c√¥ng");
            callback();
        });
    },

    testSaveScore(callback) {
        this.updateResult("üîç Test 4: L∆∞u ƒëi·ªÉm s·ªë...");
        
        window.DatabaseManager.savePlayerScore(this.testPlayerId, 150, (error, data) => {
            if (error) {
                this.updateResult(`‚ùå Save score failed: ${error.message}`);
                return;
            }
            
            this.updateResult("‚úÖ Test 4: L∆∞u ƒëi·ªÉm s·ªë th√†nh c√¥ng");
            callback();
        });
    },

    testLeaderboard(callback) {
        this.updateResult("üîç Test 5: L·∫•y b·∫£ng x·∫øp h·∫°ng...");
        
        window.DatabaseManager.getLeaderboard(5, (error, data) => {
            if (error) {
                this.updateResult(`‚ùå Get leaderboard failed: ${error.message}`);
                return;
            }
            
            this.updateResult("‚úÖ Test 5: L·∫•y b·∫£ng x·∫øp h·∫°ng th√†nh c√¥ng");
            callback();
        });
    },

    updateResult(message) {
        console.log(message);
        if (this.resultLabel) {
            this.resultLabel.string = message;
        }
    }
});